{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport io from 'socket.io-client';\nexport function useAddMessage() {\n  const addMessage = async (message, chatId) => {\n    try {\n      const authToken = localStorage.getItem('token');\n      const response = await fetch('http://localhost:8000/api/v1/message/addmessage', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n          'authorization': `Bearer ${authToken}`\n        },\n        body: JSON.stringify({\n          content: message,\n          chat: chatId\n        })\n      });\n      if (response.ok) {\n        return await response.json();\n      }\n      throw new Error('Failed to add message');\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return {\n    addMessage\n  };\n}\nexport function useFetchMsg() {\n  _s();\n  const [allMsg, setAllMsg] = useState([]);\n  const {\n    chatId\n  } = useParams();\n  const authToken = localStorage.getItem('token');\n  const fetchMsg = async () => {\n    try {\n      const response = await fetch(`http://localhost:8000/api/v1/message/allmessage/${chatId}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authToken}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch messages');\n      }\n      const responseData = await response.json();\n      setAllMsg(responseData);\n    } catch (error) {\n      console.error('Failed to fetch messages:', error);\n    }\n  };\n  useEffect(() => {\n    if (chatId) {\n      fetchMsg();\n      return () => {\n        socket.disconnect();\n      };\n    }\n  }, [chatId]);\n  return {\n    allMsg,\n    setAllMsg\n  };\n}\n_s(useFetchMsg, \"PhtWOsyxo2vYLfvMrZvFrVBPbM0=\", false, function () {\n  return [useParams];\n});","map":{"version":3,"names":["useEffect","useState","useParams","io","useAddMessage","addMessage","message","chatId","authToken","localStorage","getItem","response","fetch","method","headers","body","JSON","stringify","content","chat","ok","json","Error","error","console","log","useFetchMsg","_s","allMsg","setAllMsg","fetchMsg","responseData","socket","disconnect"],"sources":["/Users/shubham/chat/frontend/src/component/Hooks/messageHooks.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport io from 'socket.io-client';\n\nexport function useAddMessage() {\n  const addMessage = async (message , chatId) => {\n    try {\n      const authToken = localStorage.getItem('token');\n      const response = await fetch('http://localhost:8000/api/v1/message/addmessage', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json',\n          'authorization': `Bearer ${authToken}`\n        },\n        body: JSON.stringify({\n          content: message,\n          chat: chatId\n        })\n      });\n      if (response.ok) {\n        return await response.json();\n      }\n      throw new Error('Failed to add message');\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return { addMessage };\n}\n\nexport function useFetchMsg() {\n  const [allMsg, setAllMsg] = useState([]);\n  const { chatId } = useParams();\n  const authToken = localStorage.getItem('token');\n\n  const fetchMsg = async () => {\n    try {\n      const response = await fetch(`http://localhost:8000/api/v1/message/allmessage/${chatId}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authToken}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch messages');\n      }\n\n      const responseData = await response.json();\n      setAllMsg(responseData);\n    } catch (error) {\n      console.error('Failed to fetch messages:', error);\n    }\n  };\n\n  useEffect(() => {\n    if (chatId) {\n      fetchMsg();\n\n      return () => {\n        socket.disconnect();\n      };\n    }\n  }, [chatId]);\n  return { allMsg, setAllMsg };\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,EAAE,MAAM,kBAAkB;AAEjC,OAAO,SAASC,aAAaA,CAAA,EAAG;EAC9B,MAAMC,UAAU,GAAG,MAAAA,CAAOC,OAAO,EAAGC,MAAM,KAAK;IAC7C,IAAI;MACF,MAAMC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC/C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iDAAiD,EAAE;QAC9EC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAG,UAASN,SAAU;QACvC,CAAC;QACDO,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,OAAO,EAAEZ,OAAO;UAChBa,IAAI,EAAEZ;QACR,CAAC;MACH,CAAC,CAAC;MACF,IAAII,QAAQ,CAACS,EAAE,EAAE;QACf,OAAO,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MAC9B;MACA,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC1C,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IACpB;EACF,CAAC;EACD,OAAO;IAAElB;EAAW,CAAC;AACvB;AAEA,OAAO,SAASqB,WAAWA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM;IAAEM;EAAO,CAAC,GAAGL,SAAS,CAAC,CAAC;EAC9B,MAAMM,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAE/C,MAAMoB,QAAQ,GAAG,MAAAA,CAAA,KAAY;IAC3B,IAAI;MACF,MAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAAE,mDAAkDL,MAAO,EAAC,EAAE;QACxFM,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAG,UAASN,SAAU;QACvC;MACF,CAAC,CAAC;MAEF,IAAI,CAACG,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAM,IAAIE,KAAK,CAAC,0BAA0B,CAAC;MAC7C;MAEA,MAAMS,YAAY,GAAG,MAAMpB,QAAQ,CAACU,IAAI,CAAC,CAAC;MAC1CQ,SAAS,CAACE,YAAY,CAAC;IACzB,CAAC,CAAC,OAAOR,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EACF,CAAC;EAEDvB,SAAS,CAAC,MAAM;IACd,IAAIO,MAAM,EAAE;MACVuB,QAAQ,CAAC,CAAC;MAEV,OAAO,MAAM;QACXE,MAAM,CAACC,UAAU,CAAC,CAAC;MACrB,CAAC;IACH;EACF,CAAC,EAAE,CAAC1B,MAAM,CAAC,CAAC;EACZ,OAAO;IAAEqB,MAAM;IAAEC;EAAU,CAAC;AAC9B;AAACF,EAAA,CApCeD,WAAW;EAAA,QAENxB,SAAS;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport function useGetAllChat() {\n  _s();\n  const [allChat, setAllChat] = useState([]);\n  const [error, setError] = useState(null);\n  const getAllChat = async () => {\n    try {\n      const authToken = localStorage.getItem('token');\n      const response = await fetch('http://localhost:8000/api/v1/chat/fetch', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authToken}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const responseData = await response.json();\n      setAllChat(responseData);\n    } catch (error) {\n      console.error('Failed to fetch users:', error);\n      setError(error.message);\n    }\n  };\n  useEffect(() => {\n    getAllChat();\n  }, []);\n  return {\n    allChat,\n    getAllChat,\n    error\n  };\n}\n_s(useGetAllChat, \"YFTYomKVOa2b9tzRMJp3htyiPgE=\");\nexport function useGetLoggedInUser() {\n  _s2();\n  const [user, setUser] = useState(\"\");\n  const getLoggedInUser = async () => {\n    try {\n      const authToken = localStorage.getItem('token');\n      const response = await fetch('http://localhost:8000/api/v1/users/logg', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authToken}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const responseData = await response.json();\n      setUser(responseData);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    getLoggedInUser();\n  }, []);\n  return {\n    user\n  };\n}\n_s2(useGetLoggedInUser, \"JK1+suXxN1aScyvxueam6bWHLio=\");","map":{"version":3,"names":["useState","useEffect","useGetAllChat","_s","allChat","setAllChat","error","setError","getAllChat","authToken","localStorage","getItem","response","fetch","method","headers","ok","Error","responseData","json","console","message","useGetLoggedInUser","_s2","user","setUser","getLoggedInUser","log"],"sources":["/Users/shubham/chat/frontend/src/component/Hooks/chatHooks.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\n\n\n\nexport function useGetAllChat() {\n    const [allChat, setAllChat] = useState([]);\n    const [error, setError] = useState(null);\n    \n\n    const getAllChat = async () => {\n        try {\n            const authToken = localStorage.getItem('token');\n            const response = await fetch('http://localhost:8000/api/v1/chat/fetch', {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${authToken}`\n                }\n            });\n\n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n\n            const responseData = await response.json();\n            setAllChat(responseData);\n        } catch (error) {\n            console.error('Failed to fetch users:', error);\n            setError(error.message);\n        }\n    };\n\n    useEffect(() => {\n        getAllChat();\n    }, []);\n\n    return { allChat, getAllChat, error };\n}\n\nexport function useGetLoggedInUser() {\n    const [user , setUser] = useState(\"\")\n    const getLoggedInUser = async() =>{\n        try {\n            const authToken = localStorage.getItem('token');\n            const response = await fetch('http://localhost:8000/api/v1/users/logg', {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${authToken}`\n                }\n            });\n\n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n\n            const responseData = await response.json();\n            setUser(responseData);\n        } catch (error) {\n            console.log(error)\n        }\n    }\n    useEffect(()=>{\n        getLoggedInUser()\n    },[])\n    return{user}\n}\n    \n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAK3C,OAAO,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAGxC,MAAMQ,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC3B,IAAI;MACA,MAAMC,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC/C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyC,EAAE;QACpEC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAG,UAASN,SAAU;QACzC;MACJ,CAAC,CAAC;MAEF,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAClD;MAEA,MAAMC,YAAY,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;MAC1Cd,UAAU,CAACa,YAAY,CAAC;IAC5B,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACZc,OAAO,CAACd,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CC,QAAQ,CAACD,KAAK,CAACe,OAAO,CAAC;IAC3B;EACJ,CAAC;EAEDpB,SAAS,CAAC,MAAM;IACZO,UAAU,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEJ,OAAO;IAAEI,UAAU;IAAEF;EAAM,CAAC;AACzC;AAACH,EAAA,CAjCeD,aAAa;AAmC7B,OAAO,SAASoB,kBAAkBA,CAAA,EAAG;EAAAC,GAAA;EACjC,MAAM,CAACC,IAAI,EAAGC,OAAO,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EACrC,MAAM0B,eAAe,GAAG,MAAAA,CAAA,KAAU;IAC9B,IAAI;MACA,MAAMjB,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC/C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyC,EAAE;QACpEC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACL,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAG,UAASN,SAAU;QACzC;MACJ,CAAC,CAAC;MAEF,IAAI,CAACG,QAAQ,CAACI,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAClD;MAEA,MAAMC,YAAY,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;MAC1CM,OAAO,CAACP,YAAY,CAAC;IACzB,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACZc,OAAO,CAACO,GAAG,CAACrB,KAAK,CAAC;IACtB;EACJ,CAAC;EACDL,SAAS,CAAC,MAAI;IACVyB,eAAe,CAAC,CAAC;EACrB,CAAC,EAAC,EAAE,CAAC;EACL,OAAM;IAACF;EAAI,CAAC;AAChB;AAACD,GAAA,CA3BeD,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
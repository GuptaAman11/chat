{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport function useGetLoggedInUser() {\n  _s();\n  const [user, setUser] = useState(\"\");\n  const getLoggedInUser = async () => {\n    try {\n      const authToken = localStorage.getItem('token');\n      const response = await fetch('http://localhost:8000/api/v1/users/logg', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authToken}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const responseData = await response.json();\n      setUser(responseData);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    getLoggedInUser();\n  }, []);\n  return {\n    user\n  };\n}\n_s(useGetLoggedInUser, \"JK1+suXxN1aScyvxueam6bWHLio=\");\nexport function useAccessChat() {\n  const accessChat = async userId => {\n    try {\n      const authToken = localStorage.getItem('token');\n      const response = await fetch('http://localhost:8000/api/v1/chat/access', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authToken}`\n        },\n        body: JSON.stringify({\n          userId: userId\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return await response.json();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return {\n    accessChat\n  };\n}\nexport function useGetFetchChat() {\n  _s2();\n  const [connectedChat, setConnectedChat] = useState([]);\n  const getFetchChat = async () => {\n    try {\n      const authToken = localStorage.getItem('token');\n      const response = await fetch('http://localhost:8000/api/v1/chat/fetch', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authToken}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const responseData = await response.json();\n      setConnectedChat(responseData);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    getFetchChat();\n  }, []);\n  return {\n    connectedChat\n  };\n}\n_s2(useGetFetchChat, \"wfdtqDDKkGx3U6Qmx9JNao9q8Qc=\");\nexport function useCreateGroup() {\n  const createGroup = async (userArray, chatName) => {\n    try {\n      const authToken = localStorage.getItem('token');\n      const response = await fetch('http://localhost:8000/api/v1/chat/group', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authToken}`\n        },\n        body: JSON.stringify([userArray])\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return await response.json();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return {\n    createGroup\n  };\n}","map":{"version":3,"names":["useState","useEffect","useGetLoggedInUser","_s","user","setUser","getLoggedInUser","authToken","localStorage","getItem","response","fetch","method","headers","ok","Error","responseData","json","error","console","log","useAccessChat","accessChat","userId","body","JSON","stringify","useGetFetchChat","_s2","connectedChat","setConnectedChat","getFetchChat","useCreateGroup","createGroup","userArray","chatName"],"sources":["/Users/shubham/chat/frontend/src/component/Hooks/chatHooks.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nexport function useGetLoggedInUser() {\n    const [user , setUser] = useState(\"\")\n    const getLoggedInUser = async() =>{\n        try {\n            const authToken = localStorage.getItem('token');\n            const response = await fetch('http://localhost:8000/api/v1/users/logg', {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${authToken}`\n                }\n            });\n\n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n\n            const responseData = await response.json();\n            setUser(responseData);\n        } catch (error) {\n            console.log(error)\n        }\n    }\n    useEffect(()=>{\n        getLoggedInUser()\n    },[])\n    return{user}\n}\n\n\n    \nexport function useAccessChat() {\n    const accessChat = async(userId) =>{\n        try {\n            const authToken = localStorage.getItem('token');\n            const response = await fetch('http://localhost:8000/api/v1/chat/access', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${authToken}`\n                },\n                body : JSON.stringify({\n                    userId : userId\n                })\n            });\n\n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n\n           return await response.json();\n        } catch (error) {\n            console.log(error)\n        }\n    }\n    return{accessChat}\n}\n\n\nexport function useGetFetchChat() {\n    const [connectedChat , setConnectedChat] = useState([])\n    const getFetchChat = async() =>{\n        try {\n            const authToken = localStorage.getItem('token');\n            const response = await fetch('http://localhost:8000/api/v1/chat/fetch', {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${authToken}`\n                }\n            });\n\n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n\n            const responseData = await response.json();\n            setConnectedChat(responseData);\n        } catch (error) {\n            console.log(error)\n        }\n    }\n    useEffect(()=>{\n        getFetchChat()\n    },[])\n    return{connectedChat}\n}\n\n   \nexport function useCreateGroup() {\n    const createGroup = async(userArray , chatName) =>{\n        try {\n            const authToken = localStorage.getItem('token');\n            const response = await fetch('http://localhost:8000/api/v1/chat/group', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${authToken}`\n                },\n                body : JSON.stringify([userArray]),\n            });\n\n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n\n           return await response.json();\n        } catch (error) {\n            console.log(error)\n        }\n    }\n    return{createGroup}\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}